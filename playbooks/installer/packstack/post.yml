---
# There is a necessary step to add in nova.conf for encrypted volumes
- name: Update the encrypted key on compute nodes
  hosts: compute
  gather_facts: no
  sudo: yes
  tasks:
    - name: Setup fixed key for encrypted volumes
      shell: openstack-config --set /etc/nova/nova.conf keymgr fixed_key `hexdump -n 32 -v -e '/1 "%02x"' /dev/urandom`

    - name: restart nova compute service to apply changes in nova.conf
      shell: openstack-service restart nova-compute

- name: Check if BZ1300662 is enabled
  hosts: controller
  gather_facts: no
  sudo: no
  tasks:
    - group_by: key=workaround_rhbz1300662
      when: workarounds.rhbz1300662 is defined

- name: "Workaround RHBZ1300662: Keystone auth_uri set wrongly in cinder.conf"
  hosts: workaround_rhbz1300662
  gather_facts: yes
  sudo: yes
  tasks:
    - name: Configure auth_uri in cinder.conf
      ini_file: dest=/etc/cinder/cinder.conf
              section=keystone_authtoken
              option=auth_uri
              value=http://{{ ansible_default_ipv4.address }}:5000/
    - name: Restart openstack-cinder-api
      service: name=openstack-cinder-api state=restarted

    - name: Restart openstack-cinder-backup
      service: name=openstack-cinder-backup state=restarted

    - name: Restart openstack-cinder-scheduler
      service: name=openstack-cinder-scheduler state=restarted

    - name: Restart openstack-cinder-volume
      service: name=openstack-cinder-volume state=restarted


- name: Check if BZ1138740 S3/boto workaround is enabled
  hosts: controller
  gather_facts: no
  sudo: no
  tasks:
      - group_by: key=workaround_bz1138740
        when: workarounds.bz1138740 is defined

- name: "Workaround BZ1138740: Install nova-objectstore for S3/boto tests"
  hosts: workaround_bz1138740
  gather_facts: yes
  sudo: yes
  tasks:
    - name: Get the current endpoint
      shell: source /root/keystonerc_admin; keystone endpoint-list| grep -v AUTH | awk '/[0-9]{1,3}:8080/ {print $2}'
      register: old_endpoint

    - name: Get the current endpoint for S3
      shell: source /root/keystonerc_admin; keystone endpoint-list| grep -v AUTH | awk '/[0-9]{1,3}:8080/ {print $12}'
      register: endpoint_s3

    - name: Create new endpoint
      shell: source /root/keystonerc_admin; keystone endpoint-create
                --publicurl http://{{ ansible_default_ipv4.address }}:3333
                --internalurl http://{{ ansible_default_ipv4.address }}:3333
                --adminurl http://{{ ansible_default_ipv4.address }}:3333
                --service {{ endpoint_s3.stdout }}
      when: old_endpoint.stdout and endpoint_s3.stdout
      register: new_s3_endpoint

    - name: Delete old endpoint
      shell: source /root/keystonerc_admin; keystone endpoint-delete {{ old_endpoint.stdout }}
      when: new_s3_endpoint.changed

    - name: Install openstack-nova-objectstore package
      yum: name=openstack-nova-objectstore state=present

    - name: Start and enable openstack-nova-objectstore
      service: name=openstack-nova-objectstore state=started enabled=yes

    - name: Open firewall for objectstore api
      shell: |
          ( iptables -C INPUT -p tcp -m multiport --dports 3333 -m comment --comment "bz1138740 - nova objectstore api incoming" -j ACCEPT && echo "Already open" ) || \
          ( iptables -A INPUT -p tcp -m multiport --dports 3333 -m comment --comment "bz1138740 - nova objectstore api incoming" -j ACCEPT && echo "Opened" )

- name: Check if BZ1210411 packstack/floating_ip_pool is enabled
  hosts: controller
  gather_facts: no
  sudo: no
  tasks:
      - group_by: key=workaround_bz1210411
        when: workarounds.bz1210411 is defined

- name: "Workaround BZ1210411: Update floating_ip_pool in nova.conf"
  hosts: workaround_bz1210411
  gather_facts: yes
  sudo: yes
  tasks:
    - name: Get packstack's floating ip pool value
      shell: crudini --get packstack_config.txt general CONFIG_NOVA_NETWORK_DEFAULTFLOATINGPOOL
      args:
        chdir: /root
      register: packstack_floating_ip_pool

    - name: Apply packstack's floating ip pool value to nova.conf
      shell: crudini --set /etc/nova/nova.conf DEFAULT default_floating_pool {{ packstack_floating_ip_pool.stdout }}

    - name: Restart nova services to apply changes in nova.conf
      shell: openstack-service restart nova

    - name: Restart neutron service to apply changes in floating ip pool
      shell: openstack-service restart neutron

- name: Check if RHBZ1299563 ceilometer nova notifications are enabled
  hosts: compute
  gather_facts: no
  sudo: yes
  tasks:
      - name: Check if openstack-ceilometer-compute service exists
        shell: systemctl is-active openstack-ceilometer-compute
        register: ceilometer_status
        ignore_errors: yes

      - group_by: key=workaround_rhbz1299563
        when: workarounds.rhbz1299563 is defined and ceilometer_status.stdout == 'active'

- name: "Workaround RHBZ1299563: Configure ceilometer nova notifications"
  hosts: workaround_rhbz1299563
  gather_facts: no
  sudo: yes
  tasks:
    - name: Set instace_usage_audit in nova.conf
      ini_file: dest=/etc/nova/nova.conf
               section=DEFAULT
               option=instance_usage_audit
               value=True

    - name: Set instace_usage_audit_period in nova.conf
      ini_file: dest=/etc/nova/nova.conf
                section=DEFAULT
                option=instance_usage_audit_period
                value=hour

    - name: Set notify_on_state_change in nova.conf
      ini_file: dest=/etc/nova/nova.conf
                section=DEFAULT
                option=notify_on_state_change
                value=vm_and_task_state

    - name: Set notification_driver in nova.conf
      ini_file: dest=/etc/nova/nova.conf
                section=DEFAULT
                option=notification_driver
                value=messagingv2

    - name: Restart openstack-ceilometer-compute
      service: name=openstack-ceilometer-compute state=restarted

    - name: Restart nova-compute
      service: name=openstack-nova-compute state=restarted

- name:  Post install for Neutron server
  hosts: controller
  gather_facts: no
  sudo: yes
  tasks:
    - name: Enable l3-ha (VRRP) in neutron
      ini_file:
        dest: /etc/neutron/neutron.conf
        section: DEFAULT
        option: l3_ha
        value: true
      when: installer.network.ha is defined and installer.network.ha
      register: ha

    - name: Enable port-security in neutron
      ini_file:
        dest: /etc/neutron/plugins/ml2/ml2_conf.ini
        section: ml2
        option: extension_drivers
        value: port_security
      when: installer.network.type == 'neutron' and product.version.major >= 7
      register: portsec

    - name: restart neutron server
      service:
        name: neutron-server
        state: restarted
      when: ha|changed or portsec|changed

- name: Packstack post install
  hosts: controller
  gather_facts: yes
  tasks:
        # TODO(tkammer): move all params into khaleesi-settings
      - name: Create external network - neutron
        quantum_network:
            state: present
            auth_url: "http://{{ hostvars[inventory_hostname].ansible_default_ipv4.address }}:35357/v2.0/"
            login_username: admin
            login_password: "{{ hostvars[inventory_hostname].admin_password | default('redhat') }}"
            login_tenant_name: admin
            name: "{{ installer.network.name }}"
            provider_network_type: "{{ installer.network.external.provider_network_type }}"
            provider_physical_network: "{{ installer.network.label }}"
            provider_segmentation_id: "{{ installer.network.external.vlan.tag|default(omit) }}"
            router_external: yes
            shared: no
            admin_state_up: yes
        when: installer is defined and installer.network.type == 'neutron'

      - name: Create subnet for external network - neutron
        quantum_subnet:
            state: present
            auth_url: "http://{{ hostvars[inventory_hostname].ansible_default_ipv4.address }}:35357/v2.0/"
            login_username: admin
            login_password: "{{ hostvars[inventory_hostname].admin_password | default('redhat') }}"
            login_tenant_name: admin
            tenant_name: admin
            network_name: "{{ installer.network.name }}"
            name: external-subnet
            enable_dhcp: False
            gateway_ip: "{{ provisioner.network.network_list.external.nested.subnet_gateway }}"
            cidr: "{{ provisioner.network.network_list.external.nested.subnet_cidr}}"
            allocation_pool_start: "{{ provisioner.network.network_list.external.nested.allocation_pool_start }}"
            allocation_pool_end: "{{ provisioner.network.network_list.external.nested.allocation_pool_end }}"
        when: installer is defined and installer.network.type == 'neutron'

