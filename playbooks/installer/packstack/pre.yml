---
# setup packstack prerequisites
- name: Setup openstack repos for {{ product.name }}
  hosts:
      - controller
      - networker
      - compute
  gather_facts: yes
  sudo: yes
  tasks:
      - name: Disable any existing repos
        shell: sed -i 's/enabled=1/enabled=0/' /etc/yum.repos.d/*
        register: shell_result
        changed_when: "shell_result.rc == 0"
        failed_when: "shell_result.rc > 2"

      - name: Install release tool on machines
        command: yum localinstall -y {{ product.rpmrepo[ansible_distribution] }}/rhos-release-latest.noarch.rpm

      - name: Execute the release tool
        shell: "{{ product.name }}-release {{ product.version|int }}"
        register: shell_result
        changed_when: "shell_result == 0"

- name: Create ssh key if one does not exist
  hosts: controller
  gather_facts: no
  sudo: yes
  tasks:
      - name: create key
        #this will not overwrite an existing key
        user: name=root generate_ssh_key=yes

      - name: fetch ssh-key generated from controller
        fetch: src=/root/.ssh/id_rsa.pub dest=/tmp/ssh_keys/ flat=yes fail_on_missing=yes

- name: Copy ssh-key to compute and network hosts
  hosts: openstack_nodes
  gather_facts: no
  sudo: yes
  tasks:
    - name: copy ssh-key to nodes
      authorized_key: user=root key="{{ lookup('file', '/tmp/ssh_keys/id_rsa.pub') }}"

- name: Updating the Network services
  hosts: openstack_nodes:!tester
  gather_facts: no
  sudo: yes
  tasks:
    - shell: which NetworkManager &> /dev/null && echo "present" || echo "absent"
      register: networkmanager
    - name: flip NetworkManager to flat network scripts
      shell: nohup bash -c "(set -x; service NetworkManager stop && service network start; service network restart) &> /root/switch-nm.log" < /dev/null & exit 0
      when: networkmanager.stdout == 'present'
    - name: Remove NetworkManager
      service: name=NetworkManager state=stopped enabled=no
      when: networkmanager.stdout == 'present'
    - name: Enabling the network service
      service: name=network state=started enabled=yes
      when: networkmanager.stdout == 'present'
