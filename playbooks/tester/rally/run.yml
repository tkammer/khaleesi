---
- name: Pull keystonerc
  hosts: controller
  sudo: yes
  tasks:
      - name: Pull keystonerc_admin from controller
        fetch:
            src: /root/keystonerc_admin
            dest: /tmp/
            flat: yes

- name: Create keystonerc
  hosts: tester
  tasks:
      - debug: var=keystonerc
      - name: Push keystonerc_admin on tester
        copy:
         dest: "{{ tester.rally.dir }}/keystonerc_admin"
         src: /tmp/keystonerc_admin
         mode: 777

- name: Copy to Task Files Rally
  hosts: tester
  sudo: yes
  tasks:
  - name: Copy Task file from Khaleesi Settings
    copy:
      dest: "{{ tester.rally.dir }}/{{ tester.rally.taskfile }}"
      content: "{{ tester.rally.task | to_nice_json }}"
      force: yes

- name: Setup Rally
  hosts: tester
  tasks:
#  Need to somehow skip this if deployment exists
  - name: Create Rally deployment
    shell: "source {{ tester.rally.dir }}/keystonerc_admin && {{ tester.rally.path }}/bin/rally deployment create --fromenv --name {{ tester.rally.deployment }} | awk '/{{ tester.rally.deployment }}/ {print $2}'"
    register: rally_deployment_uuid
    ignore_errors: true

  - debug: var=rally_deployment_uuid

  - name: Use Rally deployment
    shell: "{{ tester.rally.path }}/bin/rally use deployment {{ tester.rally.deployment }} | awk '/Using deployment/ {print $3}'"
    register: rally_deployment_uuid
    when: "'Deployment' in rally_deployment_uuid.stdout"

  - debug: var=rally_deployment_uuid

- name: Run Rally Task
  hosts: tester
  tasks:
  - name: Check Rally deployment
    command: "{{ tester.rally.path }}/bin/rally deployment check"
  - name: Start Rally task
    command: "{{ tester.rally.path }}/bin/rally -v task start --task {{ tester.rally.dir }}/{{ tester.rally.taskfile }}"
    args:
      chdir: "{{ tester.rally.dir }}"



# TODO(yfried): Add this to enable Tempset Via Rally
#- name: Setup Tempest
#  hosts: tester
#  tasks:
#  - name: Install Tempest with Rally
#    command: "{{ tester.rally.path }}/bin/rally-manage -v tempest install --deployment {{ tester.rally.deployment }} --source {{ tester.rally.tempest.git.repo }}"
#
#  - name: Set Tempest Branch to Juno to get tempest config
#    command: "git checkout {{ tester.rally.tempest.git.revision }}"
#    args:
#      chdir: "{{ tester.rally.tempest.base }}/for-deployment-{{ tester.rally_deployment_uuid.stdout }}"
#      creates: "{{ tester.rally.tempest.base }}/for-deployment-{{ tester.rally_deployment_uuid.stdout }}/tools/config_tempest.py"
#
#  - name: Create tempest config file
#    shell: "{{ tester.rally.path }}/bin/rally {{ item }}/tools/config_tempest.py --out {{ tester.rally.tempest.conf }} --debug  --create identity.uri http://{{ hostvars[nodes.controller.name].ansible_default_ipv4.address }}:5000/v2.0/ compute.allow_tenant_isolation true object-storage.operator_role SwiftOperator identity.admin_password {{ hostvars[nodes.controller.name].admin_password|default('redhat') }} identity.password {{ hostvars[nodes.controller.name].demo_password|default('secrete') }} network.public_network_id {{ hostvars[nodes.controller.name].network.id }}"
#    args:
#      chdir: "{{ item }}"
#      creates: "{{ tester.rally.tempest.conf }}"
#    with_items:
#      - "{{ tester.rally.tempest.base }}/for-deployment-{{ tester.rally_deployment_uuid.stdout }}"
#
#  - name: Start Tempest Via Rally
#    command: "{{ tester.rally.path }}/bin/rally -v verify start --deployment {{ tester.rally.deployment }} --regex {{ tester.rally.tempest.regex }} --tempest-config {{ tester.rally.tempest.conf }}"
