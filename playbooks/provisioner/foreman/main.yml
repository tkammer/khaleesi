---
- name: Prepare nodes for rebulid - Foreman
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Add candidate hosts to host list
      add_host:
          name: "{{ item.value.name }}"
          groups: "{{ item.value.groups if item.value.groups is string else item.value.groups| join(',') }}"
          rebuild: "{{ item.value.rebuild|lower}}"
          node_label: "{{ item.key }}"
          ansible_fqdn: "{{ item.value.fqdn }}"
          ansible_user: "{{ item.value.remote_user }}"
          ansible_host: "{{ item.value.fqdn }}"
          ansible_ssh_private_key_file: "{{ provisioner.key_file }}"
      with_dict: provisioner.nodes

- name: Rebuild nodes - Foreman
  hosts: openstack_nodes:virthost
  gather_facts: no
  tasks:
    - name: Rebuild nodes
      foreman_provisioner:
           auth_url: "{{ provisioner.foreman.auth_url }}"
           username: "{{ provisioner.foreman.username }}"
           password: "{{ provisioner.foreman.password }}"
           host_id: "{{ hostvars[inventory_hostname].ansible_host }}"
           rebuild: "{{ rebuild }}"
           wait_for_host: "{{ provisioner.foreman.wait_for_host|lower }}"
      retries: 4
      delegate_to: localhost
      register: created_nodes

    - name: Wait for hosts to get reachable (after rebuild)
      delegate_to: localhost
      wait_for_ssh:
          user: "root"
          host: "{{ hostvars[inventory_hostname].ansible_host }}"
          key: "{{ hostvars[inventory_hostname].ansible_ssh_private_key_file }}"

- name: Check and Enable virtualization support
  hosts: openstack_nodes:virthost
  gather_facts: no
  vars:
    - ansible_user: root
  tasks:
    - name: Check if CPU supports INTEL based KVM
      shell: egrep -c 'vmx' /proc/cpuinfo
      ignore_errors: true
      register: kvm_intel

    - name: Check if CPU supports AMD based KVM
      shell: egrep -c 'svm' /proc/cpuinfo
      ignore_errors: true
      register: kvm_amd

    - name: Enable KVM modules
      modprobe: name=kvm
      ignore_errors: true
      when: kvm_intel.rc == 0 or kvm_amd.rc == 0

    - name: Enable Intel KVM module
      modprobe: name=kvm_intel
      ignore_errors: true
      when: kvm_intel.rc == 0

    - name: Enable AMD KVM module
      modprobe: name=kvm_amd
      ignore_errors: true
      when: kvm_amd.rc == 0

    - name: Install required QEMU-KVM packages
      yum: name=qemu-kvm state=present
      when: kvm_intel.rc == 0 or kvm_amd.rc == 0

- name: Update network interfaces on nodes - Foreman
  hosts: openstack_nodes
  gather_facts: yes
  sudo: yes
  tasks:
    - name: Setup networking (interfaces)
      template:
            src: ../templates/ifcfg-interface.j2
            dest: /etc/sysconfig/network-scripts/ifcfg-{{ item.value.label }}
            owner: root
            group: root
            mode: 644
      with_dict:
          provisioner.nodes[node_label].network.interfaces
      register: update_ifcfgs

    - name: reboot and wait for ssh
      delegate_to: localhost
      wait_for_ssh:
          reboot_first: true
          host: "{{ hostvars[inventory_hostname].ansible_host }}"
          user: "{{ hostvars[inventory_hostname].ansible_user }}"
          key: "{{ hostvars[inventory_hostname].ansible_ssh_private_key_file }}"
      when: update_ifcfgs|changed
      sudo: no

