---
- name: Check if network provisioning enabled
  hosts: localhost
  gather_facts: no
  sudo: no
  tasks:
      - group_by: key=net_prov
        when: provisioner.network.dynamic_net is defined and provisioner.network.dynamic_net

- name: Check the nodes which need a floating IP from a specific network
  hosts: localhost
  gather_facts: no
  sudo: no
  tasks:
      - group_by: key=net_add_floatingip
        when: provisioner.network.public_net_name is defined

- name: Cleanup Networks
  hosts: net_add_floatingip
  gather_facts: no
  tasks:
    - name: Delete Floating IPs
      quantum_floating_ip:
           auth_url: "{{ provisioner.auth_url }}"
           login_username: "{{ provisioner.username }}"
           login_password: "{{ provisioner.password }}"
           login_tenant_name: "{{ provisioner.tenant_name }}"
           instance_name: "{{ item.value.name }}"
           network_name: "{{ provisioner.network.public_net_name }}"
           internal_network_name: "{{ provisioner.network.network_list.management.name }}"
           state: absent
      with_dict: provisioner.nodes

- name: Cleanup Nodes
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Delete created nodes
      os_server:
          state: absent
          auth:
              auth_url: "{{ provisioner.auth_url }}"
              username: "{{ provisioner.username }}"
              password: "{{ provisioner.password }}"
              project_name: "{{ provisioner.tenant_name }}"
          name: "{{ item.value.name }}"
#           wait for deletion until we can delete flaoting ips explicitly.
          wait: yes
      with_dict: provisioner.nodes

- name: Cleanup Networks
  hosts: net_prov
  gather_facts: no
  tasks:
    - name: Delete created router
      os_router:
          state: absent
          auth:
              auth_url: "{{ provisioner.auth_url }}"
              username: "{{ provisioner.username }}"
              password: "{{ provisioner.password }}"
              project_name: "{{ provisioner.tenant_name }}"
          name: "{{ provisioner.network.router.name }}"

    - name: Delete created networks
      os_network:
          state: absent
          auth:
              auth_url: "{{ provisioner.auth_url }}"
              username: "{{ provisioner.username }}"
              password: "{{ provisioner.password }}"
              project_name: "{{ provisioner.tenant_name }}"
          name: "{{ item }}"
      with_items: provisioner.network.network_list.values()|map(attribute='name')|list
